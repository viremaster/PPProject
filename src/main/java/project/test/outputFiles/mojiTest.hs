import Sprockell

prog :: [Instruction]
prog = [ 
       Compute Equal regSprID reg0 regB, 
       Branch regB (Rel 21), 
       TestAndSet (DirAddr 1), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       ReadInstr (DirAddr 3), 
       Receive regA, 
       Load (ImmValue 1) regB, 
       Compute Add regA regB regA, 
       WriteInstr regA (DirAddr 3), 
       ReadInstr (DirAddr 3), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       ReadInstr (DirAddr 2), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       WriteInstr reg0 (DirAddr 2), 
       WriteInstr reg0 (DirAddr 1), 
       Jump (Ind regA), 
       Load (ImmValue 6) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 0), 
       Load (DirAddr 0) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 0), 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 4) regA, 
       Push regA, 
       Load (ImmValue 0) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Or regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 4) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute And regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (ImmValue 2) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 8), 
       Load (ImmValue 3) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Lt regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Gt regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Equal regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute LtE regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute GtE regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Equal regA regB regA, 
       Push regA, 
       Pop regA, 
       Load (ImmValue 1) regB, 
       Compute Xor regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 12) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Lt regA regB regA, 
       Push regA, 
       Pop regA, 
       Branch regA (Abs 144), 
       Jump (Abs 155), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Jump (Abs 133), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 12) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Lt regA regB regA, 
       Push regA, 
       Pop regA, 
       Branch regA (Abs 195), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 21) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Gt regA regB regA, 
       Push regA, 
       Pop regA, 
       Branch regA (Abs 185), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 2) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Jump (Abs 194), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Jump (Abs 205), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       EndProg
       ]

main = run [prog]