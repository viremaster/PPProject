import Sprockell

prog :: [Instruction]
prog = [ 
       Load (ImmValue 6) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 0), 
       Load (DirAddr 0) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 0), 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 4) regA, 
       Push regA, 
       Load (ImmValue 0) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute Or regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 4) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regA, 
       Pop regB, 
       Compute And regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (ImmValue 2) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 8), 
       Load (ImmValue 3) regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Lt regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Gt regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Equal regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute LtE regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute GtE regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (DirAddr 8) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Equal regA regB regA, 
       Push regA, 
       Pop regA, 
       Load (ImmValue 1) regB, 
       Compute Xor regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 4), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 12) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Lt regA regB regA, 
       Push regA, 
       Pop regA, 
       Branch regA (Rel 2), 
       Jump (Rel 12), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Jump (Rel (-21)), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 12) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Lt regA regB regA, 
       Push regA, 
       Pop regA, 
       Branch regA (Rel 33), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 21) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Gt regA regB regA, 
       Push regA, 
       Pop regA, 
       Branch regA (Rel 12), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 2) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Sub regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Jump (Rel 11), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Sub regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       Jump (Rel 11), 
       Load (DirAddr 12) regA, 
       Push regA, 
       Load (ImmValue 1) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       Store regA (DirAddr 12), 
       EndProg
       ]

main = run [prog]