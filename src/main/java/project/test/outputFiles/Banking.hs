import Sprockell

prog :: [Instruction]
prog = [ 
       Compute Equal regSprID reg0 regB, 
       Branch regB (Rel 21), 
       TestAndSet (DirAddr 1), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       ReadInstr (DirAddr 3), 
       Receive regA, 
       Load (ImmValue 1) regB, 
       Compute Add regA regB regA, 
       WriteInstr regA (DirAddr 3), 
       ReadInstr (DirAddr 3), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       ReadInstr (DirAddr 2), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       WriteInstr reg0 (DirAddr 2), 
       WriteInstr reg0 (DirAddr 1), 
       Jump (Ind regA), 
       Load (ImmValue 0) regA, 
       Push regA, 
       Pop regA, 
       WriteInstr regA (DirAddr 4), 
       ReadInstr (DirAddr 4), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       TestAndSet (DirAddr 0), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       Load (ImmValue 41) regA, 
       WriteInstr regA (DirAddr 2), 
       ReadInstr (DirAddr 2), 
       Receive regA, 
       Branch regA (Rel (-2)), 
       WriteInstr reg0 (DirAddr 0), 
       Jump (Rel  36), 
       TestAndSet (DirAddr 5), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       ReadInstr (DirAddr 4), 
       Receive regA, 
       Push regA, 
       Load (ImmValue 7) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Sub regA regB regA, 
       Push regA, 
       Pop regA, 
       WriteInstr regA (DirAddr 4), 
       ReadInstr (DirAddr 4), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       WriteInstr reg0 (DirAddr 5), 
       TestAndSet (DirAddr 1), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       ReadInstr (DirAddr 3), 
       Receive regB, 
       Load (ImmValue 1) regB, 
       Compute Sub regA regB regA, 
       WriteInstr regA (DirAddr 3), 
       ReadInstr (DirAddr 3), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       WriteInstr reg0 (DirAddr 1), 
       EndProg, 
       TestAndSet (DirAddr 0), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       Load (ImmValue 87) regA, 
       WriteInstr regA (DirAddr 2), 
       ReadInstr (DirAddr 2), 
       Receive regA, 
       Branch regA (Rel (-2)), 
       WriteInstr reg0 (DirAddr 0), 
       Jump (Rel  36), 
       TestAndSet (DirAddr 5), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       ReadInstr (DirAddr 4), 
       Receive regA, 
       Push regA, 
       Load (ImmValue 6) regA, 
       Push regA, 
       Pop regB, 
       Pop regA, 
       Compute Add regA regB regA, 
       Push regA, 
       Pop regA, 
       WriteInstr regA (DirAddr 4), 
       ReadInstr (DirAddr 4), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       WriteInstr reg0 (DirAddr 5), 
       TestAndSet (DirAddr 1), 
       Receive regA, 
       Compute Equal regA reg0 regB, 
       Branch regB (Rel (-3)), 
       ReadInstr (DirAddr 3), 
       Receive regB, 
       Load (ImmValue 1) regB, 
       Compute Sub regA regB regA, 
       WriteInstr regA (DirAddr 3), 
       ReadInstr (DirAddr 3), 
       Receive regB, 
       Compute NEq regA regB regC, 
       Branch regC (Rel (-4)), 
       WriteInstr reg0 (DirAddr 1), 
       EndProg, 
       ReadInstr (DirAddr 3), 
       Receive regA, 
       Branch regA (Rel (-2)), 
       ReadInstr (DirAddr 4), 
       Receive regA, 
       Push regA, 
       Pop regA, 
       WriteInstr regA numberIO, 
       EndProg
       ]

main = run [prog, prog, prog]